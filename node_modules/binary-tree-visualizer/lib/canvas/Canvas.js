import ColorGenerator from '../helpers/ColorGenerator';
import getRGBString from '../utils/getRGBString';
/**
 * Defines one canvas
 */
class CanvasComponent {
    /**
     * For constructing a new canvas component
     *
     * @param {HTMLCanvasElement} $el
     */
    constructor($el) {
        /**
         * The current hovering color
         */
        this.currentHoveringColor = '';
        const $hitEl = document.createElement('canvas');
        this.$el = $el;
        this.$hitEl = $hitEl;
        this.colorGenerator = new ColorGenerator();
    }
    /**
     * Clears the canvas
     */
    clearCanvas() {
        const { height, width } = this.$el;
        this.getContext().clearRect(0, 0, width, height);
    }
    /**
     * Set the maximum width and height
     *
     * @param {number} height
     * @param {number} width
     */
    setMaxWidthAndHeight(height, width) {
        this.$hitEl.height = this.$el.height = height;
        this.$hitEl.width = this.$el.width = width;
    }
    /**
     * Get the hit 2d context
     *
     * @return {CanvasComponent}
     */
    getHitContext() {
        const ctx = this.$hitEl.getContext('2d');
        if (!ctx) {
            throw new Error('Cannot get 2d context');
        }
        return ctx;
    }
    /**
     * Get the 2d context
     *
     * @return {CanvasRenderingContext2D}
     */
    getContext() {
        const ctx = this.$el.getContext('2d');
        if (!ctx) {
            throw new Error('Cannot get 2d context');
        }
        return ctx;
    }
    /**
     * Get the next color from the color generator
     *
     * @return {string}
     */
    getNextColor() {
        return this.colorGenerator.getNextColor();
    }
    /**
     * On hover get the canvas hit color
     *
     * @param {GetColorCallBack} cb
     */
    onHover(cb) {
        // Clear previous listeners
        if (this.onHoverCB) {
            this.$el.removeEventListener('mousemove', this.onHoverCB);
        }
        // Set the callback
        this.onHoverCB = (event) => {
            const { pageX, pageY } = event;
            const { data: pixel } = this.getHitContext().getImageData(pageX - this.$el.offsetLeft, pageY - this.$el.offsetTop, 1, 1);
            // Callback should only be called on color change
            const color = getRGBString(pixel[0], pixel[1], pixel[2]);
            if (this.currentHoveringColor !== color) {
                this.currentHoveringColor = color;
                cb(color);
            }
        };
        // Add the event listener
        this.$el.addEventListener('mousemove', this.onHoverCB);
    }
    /**
     * On click of canvas get the hit color
     *
     * @param {GetColorCallBack} cb
     */
    onClick(cb) {
        // Clear previous listeners
        if (this.onClickCB) {
            this.$el.removeEventListener('click', this.onClickCB);
        }
        // Set the callback
        this.onClickCB = (event) => {
            const { pageX, pageY } = event;
            console.log(pageX, pageY);
            const { data: pixel } = this.getHitContext().getImageData(pageX - this.$el.offsetLeft, pageY - this.$el.offsetTop, 1, 1);
            cb(getRGBString(pixel[0], pixel[1], pixel[2]));
        };
        // Add the event listener
        this.$el.addEventListener('click', this.onClickCB);
    }
}
export default CanvasComponent;
//# sourceMappingURL=Canvas.js.map