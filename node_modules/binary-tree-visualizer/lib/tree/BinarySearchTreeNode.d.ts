import BinaryTreeNode from './BinaryTreeNode';
/**
 * A Binary search tree node
 */
declare class BinarySearchTreeNode<T extends string | number> extends BinaryTreeNode<T> {
    /**
     * Left child of the node
     */
    left?: BinarySearchTreeNode<T>;
    /**
     * Right child of the node
     */
    right?: BinarySearchTreeNode<T>;
    /**
     * Set the left child of the node
     *
     * @param {BinarySearchTreeNode<T>} value
     */
    setLeft(value: BinarySearchTreeNode<T>): void;
    /**
     * Set the right child of the node
     *
     * @param {BinarySearchTreeNode<T>} value
     */
    setRight(value: BinarySearchTreeNode<T>): void;
    /**
     * Insert a value into the node
     * (Using Recursion)
     *
     * @param {T} value
     */
    insert(value: T): void;
    /**
     * Find the minimum value from the given node
     *
     * @param {BinarySearchTreeNode<T>} node
     * @return {BinarySearchTreeNode<T>}
     */
    findMinimum(): BinarySearchTreeNode<T>;
    /**
     * Delete this node
     *
     * @param {BinarySearchTreeNode<T>} parent
     * @return {[
     *  BinarySearchTreeNode<T>,
     *  BinarySearchTreeNode<T>
     * ]} [deletedNode, currentRoot]
     */
    deleteThisNode(parent?: BinarySearchTreeNode<T>): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?];
    /**
     * Delete a node
     * (Using recursion)
     *
     * @param {T} value
     * @param {BinarySearchTreeNode<T>} parent
     * @return {[
     *  BinarySearchTreeNode<T>,
     *  BinarySearchTreeNode<T>
     * ]} [deletedNode, currentRoot]
     */
    delete(value: T, parent?: BinarySearchTreeNode<T>): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?];
}
export default BinarySearchTreeNode;
