import Circle from '../shapes/Circle';
import theme from '../config/theme';
import getRandomColor from '../utils/getRandomColor';
/**
 * Describes a node of a binary tree
 */
class BinaryTreeNode {
    /**
     * For constructing a new binary tree node
     *
     * @param {T} value
     */
    constructor(value) {
        this.value = value;
        this.nodeCircle = new Circle(`${value}`, theme.radius, getRandomColor());
    }
    /**
     * Set the left child
     *
     * @param {BinaryTreeNode} value
     */
    setLeft(value) {
        this.left = value;
    }
    /**
     * Set the right child
     *
     * @param {BinaryTreeNode} value
     */
    setRight(value) {
        this.right = value;
    }
    /**
     * Get the height of the binry tree from the node
     * Height of root is 1
     *
     * @return {number}
     */
    getHeight() {
        var _a, _b;
        const leftHeight = ((_a = this.left) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;
        const rightHeight = ((_b = this.right) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0;
        return Math.max(leftHeight, rightHeight) + 1;
    }
}
export default BinaryTreeNode;
//# sourceMappingURL=BinaryTreeNode.js.map